#!/usr/sbin/nft -f

# Copyright Â© 2020-2023 Peng Mei Yu <pmy@xqzp.net>

flush ruleset

table inet filter {
    chain input {
        type filter hook input priority 0; policy drop;

        # Accept loopback traffic
        iif lo accept

        # Drop connections to loopback not coming from loopback
        iif != lo ip daddr 127.0.0.1/8 counter drop
        iif != lo ip6 daddr ::1/128 counter drop

        jump blacklist
        jump purge

        # Accept ICMP
        ip protocol icmp limit rate 2/second burst 2 packets counter accept
        ip6 nexthdr icmpv6 limit rate 2/second burst 2 packets counter accept

        # Accept SSH
        tcp dport 22 counter accept

        # Accept HTTP
        tcp dport 80 counter accept
        tcp dport 443 counter accept

        tcp sport 80 counter accept
        tcp sport 443 counter accept

        # Accept Mosh
        udp dport 60000-60999 counter accept

        jump ingress

        # Accept established connections
        ct state {established,related} counter accept

        # Drop invalid connections
        ct state invalid counter drop

        # Count and drop any other traffic
        counter drop comment "dropped input traffic"
    }

    chain output {
        type filter hook output priority 0; policy accept;

        # Accept loopback traffic
        oif lo accept

        jump blacklist
        jump purge

        # Reject SMTP traffic to prevent spam email
        tcp dport 25 counter reject

        # Count HTTP traffic
        tcp sport 80 counter accept
        tcp sport 443 counter accept

        tcp dport 80 counter accept
        tcp dport 443 counter accept

        jump egress

        # Count output traffic
        counter accept comment "accepted output traffic"
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        jump blacklist
        jump purge

        # Tunnel
        iifname "tun*" counter accept

        # Accept established connections
        ct state established,related counter accept

        # Drop invalid connections
        ct state invalid counter drop

        # Count dropped traffic
        counter drop comment "dropped forward traffic"
    }

    # Purge invalid traffic
    chain purge {
        # Invalid packets. These are usually recon packets.
        tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter drop
        tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|syn|rst|psh|ack|urg) counter drop
        tcp flags & (fin|syn) == (fin|syn) counter drop
        tcp flags & (syn|rst) == (syn|rst) counter drop
        tcp flags & (fin|syn|rst|ack) != syn ct state new counter drop
    }

    # Block blacklisted traffic
    chain blacklist {
        ip saddr @blacklist4 counter drop
        ip daddr @blacklist4 counter drop
        ip6 saddr @blacklist6 counter drop
        ip6 daddr @blacklist6 counter drop
    }

    # include "/etc/nftables/blacklist.conf"

    set blacklist4 {
        type ipv4_addr; flags interval;
        # elements = { };
        # elements = $blacklist_ipv4
    }

    set blacklist6 {
        type ipv6_addr; flags interval;
        # elements = { };
    }

    chain ingress {
        include "/etc/nftables/ingress.conf"
    }

    chain egress {
        include "/etc/nftables/egress.conf"
    }
}

# IPv4 NAT
table ip nat {
    chain prerouting {
        type nat hook prerouting priority -100; policy accept;
        counter comment "accepted traffic"
    }

    chain input {
        type nat hook input priority 0; policy accept;
        counter comment "accepted traffic"
    }

    chain output {
        type nat hook output priority 0; policy accept;
        counter comment "accepted traffic"
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        counter comment "accepted traffic"
    }
}

# IPv6 NAT
table ip6 nat6 {
    chain prerouting {
        type nat hook prerouting priority -100; policy accept;
        counter comment "accepted traffic"
    }

    chain input {
        type nat hook input priority 0; policy accept;
        counter comment "accepted traffic"
    }

    chain output {
        type nat hook output priority 0; policy accept;
        counter comment "accepted traffic"
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        counter comment "accepted traffic"
    }
}
